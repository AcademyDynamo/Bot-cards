import os
import random
import asyncio
import json
import logging
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, FSInputFile
from aiogram.filters import Command
import asyncpg

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
PHOTOS_DIR = "photos/"
DAILY_RESET_HOUR = 0  # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –ø–æ–ø—ã—Ç–æ–∫

if not BOT_TOKEN:
    logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN")
    exit(1)

if not os.path.exists(PHOTOS_DIR):
    os.makedirs(PHOTOS_DIR)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥"), KeyboardButton(text="–ó–∞–±–µ–π –ø–µ–Ω–∞–ª—å—Ç–∏"), KeyboardButton(text="–ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è")]
    ],
    resize_keyboard=True
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ JSON —Ñ–∞–π–ª–æ–≤ ===
def load_json(filename):
    try:
        with open(filename, "r", encoding="utf-8-sig") as f:
            content = f.read().strip()
            return json.loads(content) if content else {}
    except Exception as e:
        logger.error(f"[–û—à–∏–±–∫–∞ {filename}] {e}")
        return {}

captions = load_json("captions.json")
card_names = load_json("card_names.json")

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL ===
async def get_db():
    db_url = os.getenv("DATABASE_URL")
    if not db_url:
        logger.error("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        exit(1)
    pool = await asyncpg.create_pool(db_url)
    return pool

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü ===
async def init_db(pool):
    async with pool.acquire() as conn:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                last_photo_time REAL DEFAULT 0,
                points INTEGER DEFAULT 0,
                daily_attempts INTEGER DEFAULT 3,
                photo_attempts INTEGER DEFAULT 3,
                daily_reset_date TEXT
            )
        """)
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS user_cards (
                user_id INTEGER,
                card_name TEXT,
                PRIMARY KEY (user_id, card_name),
                FOREIGN KEY(user_id) REFERENCES users(user_id) ON DELETE CASCADE
            )
        """)
    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã")

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def get_photos():
    return list(captions.keys())

def get_cooldown_remaining(last_time, cooldown_seconds):
    remaining = int(cooldown_seconds - (datetime.now().timestamp() - last_time))
    return max(0, remaining)

async def reset_daily_attempts(pool):
    today = datetime.now().date().isoformat()
    async with pool.acquire() as conn:
        await conn.execute("UPDATE users SET daily_attempts = 3, photo_attempts = 3, daily_reset_date = $1", today)
    logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã")

async def daily_scheduler(pool):
    while True:
        now = datetime.now()
        next_run = (now + timedelta(days=1)).replace(hour=DAILY_RESET_HOUR, minute=0, second=0, microsecond=0)
        delay = (next_run - now).total_seconds()
        logger.info(f"[INFO] –°–ª–µ–¥—É—é—â–∏–π —Å–±—Ä–æ—Å –ø–æ–ø—ã—Ç–æ–∫ —á–µ—Ä–µ–∑ {delay:.0f} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(delay)
        await reset_daily_attempts(pool)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
dp = Dispatcher()

@dp.message(Command("start"))
async def start(message: Message, pool=None):
    user_id = message.from_user.id
    username = message.from_user.username or "User"
    full_name = message.from_user.full_name

    async with pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO users (user_id, username, full_name)
            VALUES ($1, $2, $3)
            ON CONFLICT (user_id) DO NOTHING
        """, user_id, username, full_name)

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!", reply_markup=main_keyboard)

@dp.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ")
async def get_photo(message: Message):
    pool = dp["pool"]
    bot = dp["bot"]  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

    user_id = message.from_user.id
    cooldown_seconds = 3600  # 1 —á–∞—Å

    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT last_photo_time FROM users WHERE user_id = $1", user_id)
        last_time = row['last_photo_time'] if row else 0

        remaining = get_cooldown_remaining(last_time, cooldown_seconds)
        if remaining > 0:
            await message.answer(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ç–æ.")
            return

        photo_files = get_photos()
        if not photo_files:
            await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        photo_name = random.choice(photo_files)
        photo_path = os.path.join(PHOTOS_DIR, photo_name)
        description = captions.get(photo_name, "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Ñ–æ—Ç–æ!")
        card_name = card_names.get(photo_name, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞")

        caption = f"{description}\n\n‚ú® –ó–∞–±–∏—Ä–∞–π –∫–∞—Ä—Ç–æ—á–∫—É, –¥—Ä—É–≥! –û–Ω–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é!\n\n{card_name}"

        photo = FSInputFile(photo_path)
        await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=caption)

        await conn.execute("""
            INSERT INTO user_cards (user_id, card_name)
            VALUES ($1, $2)
            ON CONFLICT DO NOTHING
        """, user_id, card_name)

        await conn.execute("""
            UPDATE users
            SET last_photo_time = $1, points = points + 1
            WHERE user_id = $2
        """, datetime.now().timestamp(), user_id)

@dp.message(F.text == "–ó–∞–±–µ–π –ø–µ–Ω–∞–ª—å—Ç–∏")
async def penalty_kick(message: Message, pool=None):
    user_id = message.from_user.id

    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT daily_attempts FROM users WHERE user_id = $1", user_id)
        attempts_left = row['daily_attempts'] if row else 0

        if attempts_left <= 0:
            await message.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
            return

        dice_msg = await bot.send_dice(chat_id=message.chat.id, emoji="‚öΩ")
        result = dice_msg.dice.value

        if result in [4, 5]:  # –ì–æ–ª
            await message.answer("üéâ –í—ã –∑–∞–±–∏–ª–∏ –≥–æ–ª!")
            await message.answer("üéÅ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +1 –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ!")
            await conn.execute("UPDATE users SET points = points + 1 WHERE user_id = $1", user_id)
        else:
            await message.answer("üò¢ –ú—è—á –Ω–µ –≤ –≤–æ—Ä–æ—Ç–∞—Ö. –ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")

        await conn.execute("UPDATE users SET daily_attempts = daily_attempts - 1 WHERE user_id = $1", user_id)

@dp.message(F.text == "–†–µ–π—Ç–∏–Ω–≥")
async def show_rating(message: Message, pool=None):
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT full_name, points FROM users ORDER BY points DESC LIMIT 10")
        rating_text = "üèÜ –¢–û–ü-10 –∏–≥—Ä–æ–∫–æ–≤:\n\n"
        for i, (full_name, points) in enumerate(rows, start=1):
            rating_text += f"{i}. {full_name} ‚Äî {points} –æ—á–∫–æ–≤\n"

        user_row = await conn.fetchrow("SELECT points FROM users WHERE user_id = $1", message.from_user.id)
        user_points = user_row['points'] if user_row else 0

        higher_users = await conn.fetchval("SELECT COUNT(*) FROM users WHERE points > $1", user_points)

        rating_text += f"\nüìå –í—ã: {higher_users + 1}-–µ –º–µ—Å—Ç–æ | –û—á–∫–æ–≤: {user_points}"
        await message.answer(rating_text)

@dp.message(F.text == "–ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è")
async def view_collection_list(message: Message, pool=None):
    all_cards = set(card_names.values())
    if not all_cards:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.")
        return

    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT DISTINCT card_name FROM user_cards WHERE user_id = $1", message.from_user.id)
        user_cards_set = set(row['card_name'] for row in rows)

    collection_text = "üì¶ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:\n\n"
    for idx, card_title in enumerate(sorted(all_cards), 1):
        status = "‚úÖ" if card_title in user_cards_set else "‚ùå"
        collection_text += f"{status} {card_title}\n"

    await message.answer(collection_text)

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    pool = await get_db()
    await init_db(pool)

    dp["pool"] = pool  # –ü–µ—Ä–µ–¥–∞—á–∞ –ø—É–ª–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(token=BOT_TOKEN)

    # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
    asyncio.create_task(daily_scheduler(pool))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
