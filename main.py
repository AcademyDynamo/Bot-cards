import os
import random
import asyncio
import json
import logging
import signal
import sys
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, FSInputFile
from aiogram.filters import Command
import aiosqlite

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ Secrets
PHOTOS_DIR = 'photos/'
DAILY_RESET_HOUR = 0  # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –ø–æ–ø—ã—Ç–æ–∫

if not BOT_TOKEN:
    logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN")
    sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
for required_file in ["captions.json", "card_names.json"]:
    if not os.path.exists(required_file):
        logger.error(f"–§–∞–π–ª {required_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)

if not os.path.exists(PHOTOS_DIR) or not os.listdir(PHOTOS_DIR):
    logger.warning(f"–ü–∞–ø–∫–∞ {PHOTOS_DIR} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–∞")

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥"), KeyboardButton(text="–ó–∞–±–µ–π –ø–µ–Ω–∞–ª—å—Ç–∏"), KeyboardButton(text="–ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è")]
    ],
    resize_keyboard=True
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON ===
def load_json(filename):
    try:
        with open(filename, "r", encoding="utf-8-sig") as f:
            content = f.read()
            if not content.strip():
                logger.warning(f"{filename} –ø—É—Å—Ç–æ–π")
                return {}
            return json.loads(content)
    except Exception as e:
        logger.error(f"[–û—à–∏–±–∫–∞ {filename}] {e}")
        return {}

captions = load_json("captions.json")
card_names = load_json("card_names.json")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ===
async def init_db():
    async with aiosqlite.connect("database.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                last_photo_time REAL DEFAULT 0,
                points INTEGER DEFAULT 0,
                daily_attempts INTEGER DEFAULT 3,
                photo_attempts INTEGER DEFAULT 3,
                daily_reset_date TEXT DEFAULT ''
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS user_cards (
                user_id INTEGER,
                card_name TEXT,
                PRIMARY KEY (user_id, card_name),
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        """)
        await db.commit()

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def get_photos():
    return list(captions.keys())

def get_cooldown_remaining(last_time, cooldown_seconds):
    remaining = int(cooldown_seconds - (datetime.now().timestamp() - last_time))
    return max(0, remaining)

async def reset_daily_attempts():
    today = datetime.now().date().isoformat()
    async with aiosqlite.connect("database.db") as db:
        await db.execute("UPDATE users SET daily_attempts = 3, photo_attempts = 3, daily_reset_date = ?", (today,))
        await db.commit()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
dp = Dispatcher()

@dp.message(Command("start"))
async def start(message: Message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or "User"
        full_name = message.from_user.full_name
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} ({user_id})")
        async with aiosqlite.connect("database.db") as db:
            await db.execute(
                "INSERT OR IGNORE INTO users (user_id, username, full_name) VALUES (?, ?, ?)",
                (user_id, username, full_name)
            )
            await db.commit()
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!", reply_markup=main_keyboard)
    except Exception as e:
        logger.error(f"[/start] –û—à–∏–±–∫–∞: {e}")

@dp.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ")
async def get_photo(message: Message):
    try:
        user_id = message.from_user.id
        cooldown_seconds = 3600  # –¢–µ–ø–µ—Ä—å –∫—É–ª–¥–∞—É–Ω 1 —á–∞—Å
        async with aiosqlite.connect("database.db") as db:
            cur = await db.execute("SELECT last_photo_time FROM users WHERE user_id=?", (user_id,))
            row = await cur.fetchone()
            last_time = row[0] if row else 0

            remaining = get_cooldown_remaining(last_time, cooldown_seconds)
            if remaining > 0:
                await message.answer(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ç–æ.")
                return

            photo_files = get_photos()
            if not photo_files:
                await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
                return

            photo_name = random.choice(photo_files)
            photo_path = os.path.join(PHOTOS_DIR, photo_name)
            description = captions.get(photo_name, "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Ñ–æ—Ç–æ!")
            card_name = card_names.get(photo_name, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞")

            caption = f"{description}\n\n‚ú® –ó–∞–±–∏—Ä–∞–π –∫–∞—Ä—Ç–æ—á–∫—É, –¥—Ä—É–≥! –û–Ω–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é!\n\n{card_name}"

            photo = FSInputFile(photo_path)
            await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=caption)

            await db.execute(
                "INSERT OR IGNORE INTO user_cards (user_id, card_name) VALUES (?, ?)",
                (user_id, card_name)
            )

            await db.execute(
                "UPDATE users SET last_photo_time = ?, points = points + 1 WHERE user_id = ?",
                (datetime.now().timestamp(), user_id)
            )
            await db.commit()
    except Exception as e:
        logger.error(f"[–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ] –û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@dp.message(F.text == "–ó–∞–±–µ–π –ø–µ–Ω–∞–ª—å—Ç–∏")
async def penalty_kick(message: Message):
    try:
        user_id = message.from_user.id
        async with aiosqlite.connect("database.db") as db:
            cur = await db.execute("SELECT daily_attempts FROM users WHERE user_id = ?", (user_id,))
            row = await cur.fetchone()
            attempts_left = row[0] if row else 0

            if attempts_left <= 0:
                await message.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
                return

            dice_msg = await bot.send_dice(chat_id=message.chat.id, emoji="‚öΩ")
            result = dice_msg.dice.value

            if result in [4, 5]:  # –ì–æ–ª
                await message.answer("üéâ –í—ã –∑–∞–±–∏–ª–∏ –≥–æ–ª!")
                await message.answer("üéÅ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +1 –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ!")
                await db.execute("UPDATE users SET points = points + 1 WHERE user_id = ?", (user_id,))
            else:
                await message.answer("üò¢ –ú—è—á –Ω–µ –≤ –≤–æ—Ä–æ—Ç–∞—Ö. –ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")

            await db.execute("UPDATE users SET daily_attempts = daily_attempts - 1 WHERE user_id = ?", (user_id,))
            await db.commit()
    except Exception as e:
        logger.error(f"[–ó–∞–±–µ–π –ø–µ–Ω–∞–ª—å—Ç–∏] –û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@dp.message(F.text == "–†–µ–π—Ç–∏–Ω–≥")
async def show_rating(message: Message):
    try:
        user_id = message.from_user.id
        async with aiosqlite.connect("database.db") as db:
            cur = await db.execute("SELECT full_name, points FROM users ORDER BY points DESC LIMIT 10")
            rows = await cur.fetchall()
            rating_text = "üèÜ –¢–û–ü-10 –∏–≥—Ä–æ–∫–æ–≤:\n\n"
            for i, (full_name, points) in enumerate(rows, start=1):
                rating_text += f"{i}. {full_name} ‚Äî {points} –æ—á–∫–æ–≤\n"

            cur = await db.execute("SELECT points FROM users WHERE user_id = ?", (user_id,))
            row = await cur.fetchone()
            user_points = row[0] if row else 0

            cur = await db.execute("SELECT COUNT(*) FROM users WHERE points > ?", (user_points,))
            higher_users = (await cur.fetchone())[0]

            rating_text += f"\nüìå –í—ã: {higher_users + 1}-–µ –º–µ—Å—Ç–æ | –û—á–∫–æ–≤: {user_points}"
            await message.answer(rating_text)
    except Exception as e:
        logger.error(f"[–†–µ–π—Ç–∏–Ω–≥] –û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@dp.message(F.text == "–ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è")
async def view_collection_list(message: Message):
    try:
        user_id = message.from_user.id
        all_cards = set(card_names.values())
        if not all_cards:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.")
            return

        async with aiosqlite.connect("database.db") as db:
            cur = await db.execute("SELECT DISTINCT card_name FROM user_cards WHERE user_id = ?", (user_id,))
            rows = await cur.fetchall()
            user_cards_set = set(row[0] for row in rows)

        collection_text = "üì¶ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:\n\n"
        for idx, card_title in enumerate(sorted(all_cards), 1):
            status = "‚úÖ" if card_title in user_cards_set else "‚ùå"
            collection_text += f"{status} {card_title}\n"

        await message.answer(collection_text)
    except Exception as e:
        logger.error(f"[–ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è] –û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# === –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –ø–æ–ø—ã—Ç–æ–∫ ===
async def daily_scheduler():
    while True:
        now = datetime.now()
        next_run = (now + timedelta(days=1)).replace(hour=DAILY_RESET_HOUR, minute=0, second=0, microsecond=0)
        delay = (next_run - now).total_seconds()
        logger.info(f"[INFO] –°–ª–µ–¥—É—é—â–∏–π —Å–±—Ä–æ—Å –ø–æ–ø—ã—Ç–æ–∫ —á–µ—Ä–µ–∑ {delay:.0f} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(delay)
        await reset_daily_attempts()

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ SIGTERM ===
def handle_sigterm(*args):
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    sys.exit(0)

signal.signal(signal.SIGTERM, handle_sigterm)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()
    dp.startup.register(daily_scheduler)
    bot = Bot(token=BOT_TOKEN)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª CTRL+C. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
