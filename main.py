import os
import random
import logging
import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

import aiosqlite

# ------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è -------
BOT_TOKEN = "YOUR_BOT_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
PHOTOS_DIR = "photos"
DATABASE_PATH = "database.db"
COOLDOWN_HOURS = 1  # –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ñ–æ—Ç–æ
# ----------------------------

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
def get_main_menu():
    buttons = [
        [InlineKeyboardButton(text="üì∏ –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="get_photo")],
        [InlineKeyboardButton(text="üì¶ –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è", callback_data="my_collection")],
        [InlineKeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="rating")],
        [InlineKeyboardButton(text="‚öΩ –ó–∞–±–µ–π –ø–µ–Ω–∞–ª—å—Ç–∏", callback_data="penalty_game")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
async def init_db():
    async with aiosqlite.connect(DATABASE_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                full_name TEXT,
                points INTEGER DEFAULT 0,
                last_photo_time DATETIME DEFAULT NULL
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS user_cards (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                card_name TEXT,
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        """)
        await db.commit()

async def add_user_if_not_exists(user_id, full_name):
    async with aiosqlite.connect(DATABASE_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, full_name) VALUES (?, ?)",
            (user_id, full_name)
        )
        await db.commit()

async def can_get_photo(user_id):
    async with aiosqlite.connect(DATABASE_PATH) as db:
        async with db.execute(
            "SELECT last_photo_time FROM users WHERE user_id = ?", 
            (user_id,)
        ) as cursor:
            row = await cursor.fetchone()
            if not row:
                return True
            last_time = row[0]
            if last_time is None:
                return True
            cooldown = datetime.now() - datetime.strptime(last_time, "%Y-%m-%d %H:%M:%S")
            return cooldown > timedelta(hours=COOLDOWN_HOURS)

async def update_last_photo_time(user_id):
    async with aiosqlite.connect(DATABASE_PATH) as db:
        await db.execute(
            "UPDATE users SET last_photo_time = ? WHERE user_id = ?",
            (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id)
        )
        await db.commit()

async def add_card_to_user(user_id, card_name):
    async with aiosqlite.connect(DATABASE_PATH) as db:
        await db.execute(
            "INSERT INTO user_cards (user_id, card_name) VALUES (?, ?)",
            (user_id, card_name)
        )
        await db.commit()

async def get_user_cards(user_id):
    async with aiosqlite.connect(DATABASE_PATH) as db:
        async with db.execute(
            "SELECT card_name FROM user_cards WHERE user_id = ?", 
            (user_id,)
        ) as cursor:
            rows = await cursor.fetchall()
            return [row[0] for row in rows]

async def get_user_rank(user_id):
    async with aiosqlite.connect(DATABASE_PATH) as db:
        async with db.execute("""
            SELECT user_id, COUNT(*) as total
            FROM user_cards
            GROUP BY user_id
            ORDER BY total DESC
        """) as cursor:
            ranks = await cursor.fetchall()
            for idx, (uid, _) in enumerate(ranks, start=1):
                if uid == user_id:
                    return idx
            return "‚Äî"

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@dp.message(CommandStart())
async def start(message: Message):
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    await add_user_if_not_exists(user_id, full_name)
    logger.info(f"User {user_id} started the bot.")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())

@dp.callback_query(F.data == "get_photo")
async def handle_get_photo(callback: CallbackQuery):
    user_id = callback.from_user.id
    if not await can_get_photo(user_id):
        await callback.answer("–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    photo_files = [f for f in os.listdir(PHOTOS_DIR) if f.endswith(".jpg")]
    if not photo_files:
        await callback.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.", show_alert=True)
        return

    photo_name = random.choice(photo_files)
    caption = f"–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏: {photo_name.replace('.jpg', '')}"

    photo_path = os.path.join(PHOTOS_DIR, photo_name)
    with open(photo_path, "rb") as photo_file:
        await bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=photo_file,
            caption=caption
        )

    await add_card_to_user(user_id, photo_name.replace(".jpg", ""))
    await update_last_photo_time(user_id)
    await callback.answer("–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é!")

@dp.callback_query(F.data == "my_collection")
async def handle_my_collection(callback: CallbackQuery):
    user_id = callback.from_user.id
    cards = await get_user_cards(user_id)
    if not cards:
        await callback.answer("–ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞!", show_alert=True)
        return

    response = "‚úÖ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:\n\n" + "\n".join(cards)
    await callback.message.answer(response)
    await callback.answer()

@dp.callback_query(F.data == "rating")
async def handle_rating(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with aiosqlite.connect(DATABASE_PATH) as db:
        async with db.execute("""
            SELECT u.user_id, u.full_name, COUNT(c.card_name) AS count
            FROM users u LEFT JOIN user_cards c ON u.user_id = c.user_id
            GROUP BY u.user_id
            ORDER BY count DESC LIMIT 10
        """) as cursor:
            rows = await cursor.fetchall()
            rank = await get_user_rank(user_id)
            top_text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n"
            for idx, (u_id, name, cnt) in enumerate(rows, start=1):
                top_text += f"{idx}. {name} ‚Äî {cnt} –∫–∞—Ä—Ç–æ—á–µ–∫\n"
            top_text += f"\n–í–∞—à–µ –º–µ—Å—Ç–æ: {rank}"
            await callback.message.answer(top_text)
    await callback.answer()

@dp.callback_query(F.data == "penalty_game")
async def handle_penalty(callback: CallbackQuery):
    result = await bot.send_dice(callback.message.chat.id, emoji="‚öΩ")
    dice_value = result.dice.value
    if dice_value in [4, 5, 6]:
        user_id = callback.from_user.id
        async with aiosqlite.connect(DATABASE_PATH) as db:
            await db.execute(
                "UPDATE users SET points = points + 1 WHERE user_id = ?", 
                (user_id,)
            )
            await db.commit()
        await callback.answer("–ì–û–õ! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 1 –±–æ–Ω—É—Å–Ω–æ–µ –æ—á–∫–æ!")
    else:
        await callback.answer("–ú–∏–º–æ... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    if not os.path.exists(PHOTOS_DIR):
        os.makedirs(PHOTOS_DIR)
    await init_db()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
