import os
import random
from datetime import datetime, timedelta
import json
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, FSInputFile
from aiogram.filters import Command
import asyncpg
import aiosqlite

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = '7923361349:AAGTPCue8uRWM99CwX2cFNIQX1M46WRFKJY'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
PHOTOS_DIR = 'photos/'
DAILY_RESET_HOUR = 0  # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –ø–æ–ø—ã—Ç–æ–∫

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
main_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ")],
    [
        KeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥"),
        KeyboardButton(text="–ó–∞–±–µ–π –ø–µ–Ω–∞–ª—å—Ç–∏"),
        KeyboardButton(text="–ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è")
    ]
], resize_keyboard=True)

collection_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"), KeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è")],
    [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
], resize_keyboard=True)

# === JSON –∑–∞–≥—Ä—É–∑–∫–∞ ===
def load_card_names():
    try:
        with open("card_names.json", "r", encoding="utf-8-sig") as f:
            content = f.read()
            if not content.strip():
                return {}
            return json.loads(content)
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ card_names.json] {e}")
        return {}

def load_captions():
    try:
        with open("captions.json", "r", encoding="utf-8-sig") as f:
            content = f.read()
            if not content.strip():
                return {}
            return json.loads(content)
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ captions.json] {e}")
        return {}

card_names = load_card_names()
captions = load_captions()

all_cards = list(card_names.values())

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
async def init_db():
    async with aiosqlite.connect("database.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                last_photo_time REAL DEFAULT 0,
                points INTEGER DEFAULT 0,
                daily_attempts INTEGER DEFAULT 3
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS user_cards (
                user_id INTEGER,
                card_name TEXT,
                PRIMARY KEY (user_id, card_name),
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        """)
        await db.commit()

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def get_photos():
    return list(captions.keys())

def get_cooldown_remaining(last_time, cooldown_seconds):
    remaining = int(cooldown_seconds - (datetime.now().timestamp() - last_time))
    return max(0, remaining)

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
@dp.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "User"
    full_name = message.from_user.full_name

    async with aiosqlite.connect("database.db") as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, username, full_name) VALUES (?, ?, ?)",
            (user_id, username, full_name)
        )
        await db.commit()

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!", reply_markup=main_keyboard)

@dp.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ")
async def get_photo(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "User"
    full_name = message.from_user.full_name
    cooldown_seconds = 3600  # 1 —á–∞—Å

    async with aiosqlite.connect("database.db") as db:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, username, full_name) VALUES (?, ?, ?)",
            (user_id, username, full_name)
        )

        cur = await db.execute("SELECT last_photo_time FROM users WHERE user_id=?", (user_id,))
        row = await cur.fetchone()
        last_time = row[0] if row else 0

        remaining = get_cooldown_remaining(last_time, cooldown_seconds)
        if remaining > 0:
            hours = remaining // 3600
            minutes = (remaining % 3600) // 60
            formatted = ""
            if hours > 0:
                formatted += f"{hours} —á "
            if minutes > 0:
                formatted += f"{minutes} –º–∏–Ω"
            await message.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {formatted.strip()}")
            return

        photo_files = get_photos()
        if not photo_files:
            await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        photo_name = random.choice(photo_files)
        photo_path = os.path.join(PHOTOS_DIR, photo_name)
        card_title = card_names.get(photo_name, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞")

        caption = f"{card_title}\n\n{captions.get(photo_name, '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Ñ–æ—Ç–æ!')}"
        caption += "\n\n‚ú® –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é!"

        if not os.path.exists(photo_path):
            await message.answer("–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        photo = FSInputFile(photo_path)
        await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=caption)

        await db.execute(
            "INSERT OR IGNORE INTO user_cards (user_id, card_name) VALUES (?, ?)",
            (user_id, card_title)
        )

        await db.execute(
            "UPDATE users SET last_photo_time = ?, points = points + 1 WHERE user_id = ?",
            (datetime.now().timestamp(), user_id)
        )

        await db.commit()

# === –ò–≥—Ä–∞ "–ó–∞–±–µ–π –ø–µ–Ω–∞–ª—å—Ç–∏" —á–µ—Ä–µ–∑ —ç–º–æ–¥–∑–∏ –º—è—á–∞ ‚öΩ ===
@dp.message(F.text == "–ó–∞–±–µ–π –ø–µ–Ω–∞–ª—å—Ç–∏")
async def penalty_kick(message: Message):
    user_id = message.from_user.id

    async with aiosqlite.connect("database.db") as db:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –≤ –±–∞–∑–µ
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, username, full_name) VALUES (?, ?, ?)",
            (user_id, message.from_user.username or "User", message.from_user.full_name)
        )

        cur = await db.execute("SELECT daily_attempts FROM users WHERE user_id = ?", (user_id,))
        row = await cur.fetchone()
        attempts_left = row[0] if row else 0

        if attempts_left <= 0:
            await message.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
            return

        dice_msg = await bot.send_dice(chat_id=message.chat.id, emoji="‚öΩ")
        result = dice_msg.dice.value

        if result in [4, 5]:  # –ì–æ–ª
            await message.answer("üéâ –í—ã –∑–∞–±–∏–ª–∏ –≥–æ–ª!")
            await message.answer("üéÅ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +1 –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ!")

            await db.execute(
                "UPDATE users SET daily_attempts = daily_attempts + 1 WHERE user_id = ?",
                (user_id,)
            )
        else:
            await message.answer("üò¢ –ú—è—á –Ω–µ –≤ –≤–æ—Ä–æ—Ç–∞—Ö. –ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")

        await db.execute(
            "UPDATE users SET daily_attempts = daily_attempts - 1 WHERE user_id = ?",
            (user_id,)
        )

        await db.commit()

# === –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º ===
@dp.message(F.text == "–†–µ–π—Ç–∏–Ω–≥")
async def show_rating(message: Message):
    user_id = message.from_user.id

    async with aiosqlite.connect("database.db") as db:
        cur = await db.execute("SELECT full_name, points FROM users ORDER BY points DESC LIMIT 10")
        rows = await cur.fetchall()

        rating_text = "üèÜ –¢–û–ü-10 –∏–≥—Ä–æ–∫–æ–≤:\n\n"
        for i, (full_name, points) in enumerate(rows, start=1):
            rating_text += f"{i}. {full_name} ‚Äî {points} –æ—á–∫–æ–≤\n"

        cur = await db.execute("SELECT points FROM users WHERE user_id = ?", (user_id,))
        row = await cur.fetchone()
        user_points = row[0] if row else 0

        cur = await db.execute("SELECT COUNT(*) FROM users WHERE points > ?", (user_points,))
        higher_users = (await cur.fetchone())[0]

        rating_text += f"\nüìå –í—ã: {higher_users + 1}-–µ –º–µ—Å—Ç–æ | –û—á–∫–æ–≤: {user_points}"
        await message.answer(rating_text)

# === –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–ø–∏—Å–∫–æ–º —Å –≥–∞–ª–æ—á–∫–∞–º–∏ ‚úÖ / ‚ùå ===
@dp.message(F.text == "–ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è")
async def view_collection_list(message: Message):
    user_id = message.from_user.id

    async with aiosqlite.connect("database.db") as db:
        cur = await db.execute("SELECT DISTINCT card_name FROM user_cards WHERE user_id = ?", (user_id,))
        rows = await cur.fetchall()

        if not rows:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")
            return

        user_cards_set = set(row[0] for row in rows)

    collection_text = "üì¶ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:\n\n"
    for card_title in all_cards:
        if card_title in user_cards_set:
            collection_text += f"‚úÖ {card_title}\n"
        else:
            collection_text += f"‚ùå {card_title}\n"

    await message.answer(collection_text)

# === –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–ª–∏—Å—Ç–∞–Ω–∏–µ) ===
user_card_list = []
current_index = 0

@dp.message(F.text == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è")
async def prev_card(message: Message):
    global current_index, user_card_list

    if not user_card_list:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é.")
        return

    current_index = (current_index - 1) % len(user_card_list)
    card_name = user_card_list[current_index]
    photo_path = os.path.join(PHOTOS_DIR, card_name)
    description = card_names.get(card_name, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

    if not os.path.exists(photo_path):
        await message.answer(f"–§–æ—Ç–æ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    photo = FSInputFile(photo_path)
    await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=f"{card_name}\n\n{description}")

@dp.message(F.text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è")
async def next_card(message: Message):
    global current_index, user_card_list

    if not user_card_list:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é.")
        return

    current_index = (current_index + 1) % len(user_card_list)
    card_name = user_card_list[current_index]
    photo_path = os.path.join(PHOTOS_DIR, card_name)
    description = card_names.get(card_name, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

    if not os.path.exists(photo_path):
        await message.answer(f"–§–æ—Ç–æ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    photo = FSInputFile(photo_path)
    await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=f"{card_name}\n\n{description}")

@dp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message):
    global user_card_list, current_index
    user_card_list = []
    current_index = 0
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π ===
@dp.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é")
async def view_collection(message: Message):
    global user_card_list, current_index
    user_id = message.from_user.id

    async with aiosqlite.connect("database.db") as db:
        cur = await db.execute("SELECT card_name FROM user_cards WHERE user_id = ?", (user_id,))
        rows = await cur.fetchall()
        if not rows:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")
            return

        user_card_list = [row[0] for row in rows]
        current_index = 0
        card_name = user_card_list[current_index]
        photo_path = os.path.join(PHOTOS_DIR, card_name)
        description = card_names.get(card_name, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

        if not os.path.exists(photo_path):
            await message.answer(f"–§–æ—Ç–æ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        photo = FSInputFile(photo_path)
        await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=f"{card_name}\n\n{description}")
        await message.answer("üìñ –ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏:", reply_markup=collection_keyboard)

# === –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –ø–æ–ø—ã—Ç–æ–∫ ===
async def reset_daily_attempts():
    today = datetime.now().date().isoformat()
    async with aiosqlite.connect("database.db") as db:
        await db.execute("UPDATE users SET daily_attempts = 3, daily_reset_date = ?", (today,))
        await db.commit()

# === –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å (–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫) ===
async def daily_scheduler():
    while True:
        now = datetime.now()
        next_run = (now + timedelta(days=1)).replace(hour=DAILY_RESET_HOUR, minute=0, second=0)
        delay = (next_run - now).total_seconds()
        print(f"[INFO] –°–ª–µ–¥—É—é—â–∏–π —Å–±—Ä–æ—Å –ø–æ–ø—ã—Ç–æ–∫ —á–µ—Ä–µ–∑ {delay:.0f} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(delay)
        await reset_daily_attempts()

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await init_db()
    asyncio.create_task(daily_scheduler())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
