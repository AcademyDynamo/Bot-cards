import os
import random
from datetime import datetime, timedelta
import telebot
from telebot import types
import sqlite3
import json

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = '7923361349:AAGTPCue8uRWM99CwX2cFNIQX1M46WRFKJY'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
PHOTOS_DIR = 'photos/'
DAILY_RESET_HOUR = 0  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–∫–∞

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = telebot.TeleBot(BOT_TOKEN)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ"))
main_keyboard.row(
    types.KeyboardButton("–†–µ–π—Ç–∏–Ω–≥"),
    types.KeyboardButton("–ó–∞–±–µ–π –ø–µ–Ω–∞–ª—å—Ç–∏"),
    types.KeyboardButton("–ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è")
)

collection_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
collection_keyboard.add(
    types.KeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"),
    types.KeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è")
)
collection_keyboard.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))

# === JSON –∑–∞–≥—Ä—É–∑–∫–∞ ===
def load_captions():
    try:
        with open("captions.json", "r", encoding="utf-8-sig") as f:
            content = f.read()
            if not content.strip():
                return {}
            return json.loads(content)
    except Exception:
        return {}

def load_card_names():
    try:
        with open("card_names.json", "r", encoding="utf-8-sig") as f:
            content = f.read()
            if not content.strip():
                return {}
            return json.loads(content)
    except Exception:
        return {}

captions = load_captions()
card_names = load_card_names()

all_cards = list(card_names.values())

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    conn = sqlite3.connect("database.db")
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            full_name TEXT,
            last_photo_time REAL DEFAULT 0,
            points INTEGER DEFAULT 0,
            daily_attempts INTEGER DEFAULT 3
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS user_cards (
            user_id INTEGER,
            card_name TEXT,
            PRIMARY KEY (user_id, card_name)
        )
    """)
    conn.commit()
    return conn

db_conn = init_db()

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def get_photos():
    return list(captions.keys())

def format_cooldown(seconds):
    if seconds <= 0:
        return None
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    result = ""
    if hours > 0:
        result += f"{hours} —á "
    if minutes > 0:
        result += f"{minutes} –º–∏–Ω"
    return result.strip() or None

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username or "User"
    full_name = message.from_user.full_name
    cur = db_conn.cursor()
    cur.execute("INSERT OR IGNORE INTO users (user_id, username, full_name) VALUES (?, ?, ?)",
                (user_id, username, full_name))
    db_conn.commit()
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!", reply_markup=main_keyboard)

@bot.message_handler(func=lambda m: m.text == "–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ")
def get_photo(message):
    user_id = message.from_user.id
    cooldown_seconds = 3600  # 1 —á–∞—Å

    cur = db_conn.cursor()
    cur.execute("SELECT last_photo_time FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    last_time = row[0] if row else 0

    remaining = int(cooldown_seconds - (datetime.now().timestamp() - last_time))
    formatted_remaining = format_cooldown(remaining)

    if formatted_remaining:
        bot.reply_to(message, f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {formatted_remaining}")
        return

    photo_files = get_photos()
    if not photo_files:
        bot.reply_to(message, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    photo_name = random.choice(photo_files)
    photo_path = os.path.join(PHOTOS_DIR, photo_name)
    card_title = card_names.get(photo_name, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞")

    caption = f"{card_title}\n\n{captions.get(photo_name, '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Ñ–æ—Ç–æ!')}"
    caption += "\n\n‚ú® –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é!"

    if not os.path.exists(photo_path):
        bot.reply_to(message, "–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    with open(photo_path, "rb") as photo:
        bot.send_photo(message.chat.id, photo, caption=caption)

    cur.execute("INSERT OR IGNORE INTO user_cards (user_id, card_name) VALUES (?, ?)", (user_id, card_title))
    cur.execute("UPDATE users SET last_photo_time = ?, points = points + 1 WHERE user_id = ?", 
                (datetime.now().timestamp(), user_id))
    db_conn.commit()

# === –ò–≥—Ä–∞ "–ó–∞–±–µ–π –ø–µ–Ω–∞–ª—å—Ç–∏" —á–µ—Ä–µ–∑ —ç–º–æ–¥–∑–∏ –º—è—á–∞ ‚öΩ ===
@bot.message_handler(func=lambda m: m.text == "–ó–∞–±–µ–π –ø–µ–Ω–∞–ª—å—Ç–∏")
def penalty_kick(message):
    user_id = message.from_user.id
    cur = db_conn.cursor()
    cur.execute("SELECT daily_attempts FROM users WHERE user_id = ?", (user_id,))
    attempts_left = cur.fetchone()[0]

    if attempts_left <= 0:
        bot.reply_to(message, "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return

    dice_msg = bot.send_dice(message.chat.id, emoji="‚öΩ")
    result = dice_msg.dice.value

    if result in [4, 5]:  # –ì–æ–ª
        bot.send_message(message.chat.id, "üéâ –û—Ç–ª–∏—á–Ω—ã–π —É–¥–∞—Ä! –ì–æ–ª!")
        bot.send_message(message.chat.id, "üéÅ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +1 –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ!")

        cur.execute("UPDATE users SET points = points + 1, daily_attempts = daily_attempts + 1 WHERE user_id = ?", (user_id,))
    else:
        bot.send_message(message.chat.id, "üò¢ –ú—è—á –Ω–µ –≤ –≤–æ—Ä–æ—Ç–∞—Ö. –ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")

    cur.execute("UPDATE users SET daily_attempts = daily_attempts - 1 WHERE user_id = ?", (user_id,))
    db_conn.commit()

# === –†–µ–π—Ç–∏–Ω–≥ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (full_name), –∞ –Ω–µ username ===
@bot.message_handler(func=lambda m: m.text == "–†–µ–π—Ç–∏–Ω–≥")
def show_rating(message):
    user_id = message.from_user.id
    cur = db_conn.cursor()
    cur.execute("SELECT full_name, points FROM users ORDER BY points DESC LIMIT 10")
    rows = cur.fetchall()

    rating_text = "üèÜ –¢–û–ü-10 –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for i, (full_name, points) in enumerate(rows, start=1):
        rating_text += f"{i}. {full_name} ‚Äî {points} –æ—á–∫–æ–≤\n"

    cur.execute("SELECT points FROM users WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    user_points = row[0] if row else 0

    cur.execute("SELECT COUNT(*) FROM users WHERE points > ?", (user_points,))
    higher_users = cur.fetchone()[0]

    rating_text += f"\nüìå –í—ã: {higher_users + 1}-–µ –º–µ—Å—Ç–æ | –û—á–∫–æ–≤: {user_points}"
    bot.reply_to(message, rating_text)

# === –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–∏—Å–∫–æ–º —Å –≥–∞–ª–æ—á–∫–∞–º–∏ ‚úÖ / ‚ùå ===
@bot.message_handler(func=lambda m: m.text == "–ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è")
def view_collection(message):
    user_id = message.from_user.id
    cur = db_conn.cursor()
    cur.execute("SELECT DISTINCT card_name FROM user_cards WHERE user_id = ?", (user_id,))
    rows = cur.fetchall()

    if not rows:
        bot.reply_to(message, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")
        return

    user_cards_set = set(row[0] for row in rows)

    collection_text = "üì¶ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:\n\n"
    for card_title in all_cards:
        if card_title in user_cards_set:
            collection_text += f"‚úÖ {card_title}\n"
        else:
            collection_text += f"‚ùå {card_title}\n"

    bot.reply_to(message, collection_text)

# === –õ–∏—Å—Ç–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ===
user_card_list = []
current_index = 0

@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è")
def prev_card(message):
    global current_index, user_card_list
    if not user_card_list:
        bot.reply_to(message, "–í—ã –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é.")
        return

    current_index = (current_index - 1) % len(user_card_list)
    card_name = user_card_list[current_index]
    photo_path = os.path.join(PHOTOS_DIR, card_name)
    description = card_names.get(card_name, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

    if not os.path.exists(photo_path):
        bot.reply_to(message, f"–§–æ—Ç–æ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    bot.send_photo(message.chat.id, open(photo_path, "rb"), caption=f"{card_name}\n\n{description}")

@bot.message_handler(func=lambda m: m.text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è")
def next_card(message):
    global current_index, user_card_list
    if not user_card_list:
        bot.reply_to(message, "–í—ã –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é.")
        return

    current_index = (current_index + 1) % len(user_card_list)
    card_name = user_card_list[current_index]
    photo_path = os.path.join(PHOTOS_DIR, card_name)
    description = card_names.get(card_name, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

    if not os.path.exists(photo_path):
        bot.reply_to(message, f"–§–æ—Ç–æ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    bot.send_photo(message.chat.id, open(photo_path, "rb"), caption=f"{card_name}\n\n{description}")

@bot.message_handler(func=lambda m: m.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
def back_to_menu(message):
    global user_card_list, current_index
    user_card_list = []
    current_index = 0
    bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
