import os
import random
import asyncio
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, FSInputFile
from aiogram.filters import Command
import aiosqlite


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
PHOTOS_DIR = 'photos/'

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì∏ –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="‚öΩ –ó–∞–±–µ–π –ø–µ–Ω–∞–ª—å—Ç–∏"), KeyboardButton(text="üì¶ –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è")],
        [KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥")]
    ],
    resize_keyboard=True
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON ===
def load_captions():
    try:
        with open("captions.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ captions.json] {e}")
        return {}

def load_card_names():
    try:
        with open("card_names.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ card_names.json] {e}")
        return {}

captions = load_captions()
card_names = load_card_names()


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ===
async def init_db():
    async with aiosqlite.connect("database.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                full_name TEXT,
                points INTEGER DEFAULT 0
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS user_cards (
                user_id INTEGER,
                card_name TEXT,
                PRIMARY KEY (user_id, card_name),
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        """)
        await db.commit()
    print("[INFO] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def get_photos():
    return list(captions.keys())

async def get_or_create_user(user_id, full_name):
    async with aiosqlite.connect("database.db") as db:
        cur = await db.execute("SELECT 1 FROM users WHERE user_id=?", (user_id,))
        if not await cur.fetchone():
            await db.execute(
                "INSERT INTO users (user_id, full_name) VALUES (?, ?)",
                (user_id, full_name)
            )
            await db.commit()
    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} ({user_id}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    await get_or_create_user(user_id, full_name)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!", reply_markup=keyboard)


@dp.message(F.text == "üì∏ –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ")
async def get_photo(message: Message):
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    await get_or_create_user(user_id, full_name)

    photo_files = get_photos()
    if not photo_files:
        await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    photo_name = random.choice(photo_files)
    photo_path = os.path.join(PHOTOS_DIR, photo_name)
    caption_text = captions.get(photo_name, "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Ñ–æ—Ç–æ!")
    card_name = card_names.get(photo_name, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞")

    final_caption = f"{caption_text}\n\n‚ú® –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é!"

    async with aiosqlite.connect("database.db") as db:
        await db.execute("INSERT OR IGNORE INTO user_cards (user_id, card_name) VALUES (?, ?)", (user_id, card_name))
        await db.execute("UPDATE users SET points = points + 1 WHERE user_id = ?", (user_id,))
        await db.commit()

    photo = FSInputFile(photo_path)
    await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=final_caption)


@dp.message(F.text == "‚öΩ –ó–∞–±–µ–π –ø–µ–Ω–∞–ª—å—Ç–∏")
async def penalty_kick(message: Message):
    user_id = message.from_user.id
    await get_or_create_user(user_id, message.from_user.full_name)

    dice_msg = await bot.send_dice(chat_id=message.chat.id, emoji="‚öΩ")
    result = dice_msg.dice.value

    if result in [4, 5]:  # –ì–æ–ª
        await message.answer("üéâ –£—Ä–∞! –í—ã –∑–∞–±–∏–ª–∏ –≥–æ–ª!")
        await message.answer("üéÅ –ü–æ–ª—É—á–∏—Ç–µ +1 –∫ –≤–∞—à–∏–º –æ—á–∫–∞–º!")
        async with aiosqlite.connect("database.db") as db:
            await db.execute("UPDATE users SET points = points + 1 WHERE user_id = ?", (user_id,))
            await db.commit()
    else:
        await message.answer("üò¢ –ù–µ –ø–æ–≤–µ–∑–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")


@dp.message(F.text == "üì¶ –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è")
async def my_collection(message: Message):
    user_id = message.from_user.id
    await get_or_create_user(user_id, message.from_user.full_name)

    all_cards = list(card_names.values())
    if not all_cards:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.")
        return

    async with aiosqlite.connect("database.db") as db:
        cur = await db.execute("SELECT DISTINCT card_name FROM user_cards WHERE user_id = ?", (user_id,))
        rows = await cur.fetchall()
        user_cards = set(row[0] for row in rows)

    text = "üìÇ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:\n\n"
    for card in all_cards:
        status = "‚úÖ" if card in user_cards else "‚ùå"
        text += f"{status} {card}\n"

    await message.answer(text)


@dp.message(F.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
async def rating(message: Message):
    user_id = message.from_user.id
    await get_or_create_user(user_id, message.from_user.full_name)

    async with aiosqlite.connect("database.db") as db:
        cur = await db.execute("SELECT full_name, points FROM users ORDER BY points DESC LIMIT 10")
        top_users = await cur.fetchall()

        cur = await db.execute("SELECT points FROM users WHERE user_id = ?", (user_id,))
        row = await cur.fetchone()
        user_points = row[0] if row else 0

        cur = await db.execute("SELECT COUNT(*) FROM users WHERE points > ?", (user_points,))
        higher_count = (await cur.fetchone())[0]

    text = "üèÜ –¢–û–ü-10 –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for idx, (name, score) in enumerate(top_users, start=1):
        text += f"{idx}. {name} ‚Äî {score} –æ—á–∫–æ–≤\n"

    text += f"\nüìå –í—ã: {higher_count + 1}-–µ –º–µ—Å—Ç–æ | –û—á–∫–æ–≤: {user_points}"
    await message.answer(text)


# === –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –ø–æ–ø—ã—Ç–æ–∫ (–ø—Ä–∏–º–µ—Ä) ===
async def daily_scheduler():
    while True:
        now = datetime.now()
        next_run = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
        delay = (next_run - now).total_seconds()
        print(f"[INFO] –°–ª–µ–¥—É—é—â–∏–π —Å–±—Ä–æ—Å —á–µ—Ä–µ–∑ {delay:.0f} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(delay)


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    print("=== –ë–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª ===")
    if not BOT_TOKEN:
        print("[ERROR] BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    await init_db()
    dp.startup.register(daily_scheduler)
    print("[INFO] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
